"""
<Program Name>
  reversegeo_blur.r2py

<Started>
  February 1, 2015

<Author>
  Aditi Prabhu

<Purpose>
 This program uses the latitude and longitude data from a GPS and returns
 an address related to these coordinates. The "zoom" parameter for the 
 address specifies the level of detail that must be present and blurs out 
 everything else in the address returned. The zoom value varies from 1-5,
 where 1 is country and 5 is the house/building.
 
 We use Nominatim to perform this. The wiki for this tool is available at 
 http://wiki.openstreetmap.org/wiki/Nominatim#Reverse_Geocoding_.2F_Address_lookup

"""

def get_address(latitude, longitude, zoom):
	"""
  <Purpose>
   This is the main function which performs reverse geocoding and returns
	 required level of detail from the address generated by the lat/long pair.

  <Arguments>
   latitude:
	         (type: float) - the latitude coordinate returned by the GPS
   longitude:
	         (type: float) - the longitude coordinate returned by the GPS
   zoom:
	         (type: integer from 1-5) - The required level of detail in the address
     1: Country
     2: State
     3: City
     4: Road
     5: House Number

	<Exceptions>
	    PortsUnavailableError when there are no available ports
			TimeoutError when the connection times out before receiving any data

	<Returns>
   A string containing the blurred address

	"""

	message_to_server = build_GET_message(latitude, longitude)
	nominatim_server_connection = get_connection_to_geoip_server(gethostbyname("nominatim.openstreetmap.org"), 80)
	nominatim_server_connection.send(message_to_server) # Sends query to the Nominatim server
	message_from_server = get_response_from_geoip_server(nominatim_server_connection, 2) #timeout = 2
	nominatim_server_connection.close()
	location = loc_parser(message_from_server, zoom)
	return location


# Builds the HTTP GET message to be sent
def build_GET_message(lat, long):
	message = "GET /reverse?format=xml&lat=" + str(lat) + "&lon=" + str(long) + \
	"&zoom=18&addressdetails=1 HTTP/1.1\r\nHost: nominatim.openstreetmap.org\r\n\r\n"
	return message


# Connects to the Nominatim server from any available port
def get_connection_to_geoip_server(serverip,port_no):
	available_ports = list(getresources()[0]['connport']) #???
	  
	for port in available_ports:
		port = int(port) 
		try:
			nominatim_server_connection = openconnection(serverip, \
				port_no, getmyip(), port, 5)		#timeout = 5
			log("Using port", port, "\n\n")
			return nominatim_server_connection
		except Exception as e:
			log("Using port", port, "had a problem:", str(e), '\n\n')
			continue

	raise PortsUnavailableError("Sorry! No ports available at this time.\n\n")


# Receives the reply from the Nominatim server after the query is sent
def get_response_from_geoip_server(nominatim_server_connection, timeout):
	received_string = ""
	time_started = getruntime()
	while getruntime() < time_started+timeout:
		try:
			received_string = nominatim_server_connection.recv(4096)
		except SocketWouldBlockError:
			if received_string != "":
				break
		except SocketClosedRemote:
			pass

	if received_string == "":
		raise TimeoutError("Connection timed out.\n\n")
	else:
		return received_string


# Extract the required data from the reply (string) sent by the Nominatim server
def loc_parser(message, zoom):
	
	if zoom == 1: #country
		start = message.find("<country>") + len("<country>")
		end = message.find("</country>")
		message = message[start:end] + "\n\n"
		return message
	
	if zoom == 2: #state
		start = message.find("<state>") + len("<state>")
		end = message.find("</state>")
		message = message[start:end] + ", " + loc_parser(message, 1)
		return message
	
	if zoom == 3: #city
		start = message.find("<city>") + len("<city>")
		end = message.find("</city>")
		message = message[start:end] + ", " + loc_parser(message, 2)
		return message
		
	if zoom == 4: #road
		start = message.find("<road>") + len("<road>")
		end = message.find("</road>")
		message = message[start:end] + ", " + loc_parser(message, 3)
		return message

	if zoom == 5: #house number
		start = message.find("<house_number>") + len("<house_number>")
		end = message.find("</house_number>")
		message = message[start:end] + ", " + loc_parser(message, 4)
		return message



# test 
log(get_address(52.54877605, -1.81627023283164, 3))
