"""
<Program Name>
  gps_location_blur.r2py

<Started>
  March 20, 2015
  
<Purpose>
  Provides a method to blur the true lat/lng coordinates returned by the
  location sensors on a mobile device. The coordinates can be blurred to
  represent the center of the nearest city, state/province or country, based
  on requirement.

"""

dy_import_module_symbols("sensorlib.r2py")
dy_import_module_symbols("httpretrieve.r2py")
dy_import_module_symbols("math.r2py")
dy_import_module_symbols("librepyfile.r2py")

statefilename = "states.txt"        # Database of states
countryfilename = "countries.txt"   # Database of countries


# Returns a dictionary of the lat/lng coordinates from the sensors on a
# mobile device.
# Example:
# {"latitude": xxxx, "longitude": xxxx}
def get_gps_coordinates():

  # get a connection to communicate with sensors
  port = get_connectionport()
  sensor_socket = getconnection(port)

  request_data(sensor_socket, 'startLocating', [])

  # try to read current location
  location_data = request_data(sensor_socket, 'readLocation', []) 

  # if location was not retrieved, keep trying
  while not location_data:
    sleep(2)
    location_data = request_data(sensor_socket, 'readLocation', [])

  providers = ["gps", "network", "passive"]
  for p in providers:
    try:
      location = location_data[p]
      log("provider: " + p + '\n')
      break
    except Exception as e:
      continue

  coordinates = {"latitude": location["latitude"], "longitude": location["longitude"]}

  request_data(sensor_socket, 'stopLocating', []) 
  sensor_socket.close()
  return coordinates


# Returns the lat/lng coordinates of the center of the city closest to the
# actual coordinates
def get_city_coordinates(lat, lng):

  closest = find_closest_point(lat, lng)
  log("city: " + closest["city"] + "\n")
  coordinates = {"latitude": closest["coordinates"][0], "longitude": closest["coordinates"][1]}
  return coordinates


# Returns the lat/lng coordinates of the center of the state/province
# closest to the actual coordinates
def get_state_coordinates(lat, lng):

  state_name = ""
  slat = ""
  slng = ""

  closest = find_closest_point(lat, lng)
  country_code = closest["countrycode"]
  state_code = closest["statecode"]
  code = country_code + "." + str(state_code)

  # Download the States database
  get_file_from_server(statefilename)

  statefile = open(statefilename, "r")

  # Look for the state corresponding to the code
  while True:
    try:
      line = statefile.next().strip()
    except StopIteration:
      break
    else:
      line = line.split("\t")
      if code == line[0]:
        state_name = line[1]
        slat = line[2]
        slng = line[3]
        break
  statefile.close()

  log("state: " + state_name + "\n")
  coordinates = {"latitude": slat, "longitude": slng}
  return coordinates


# Returns the lat/lng coordinates of the center of the country closest to the
# actual coordinates
def get_country_coordinates(lat, lng):

  country_name = ""
  clat = ""
  clng = ""

  closest = find_closest_point(lat, lng)
  country_code = closest["countrycode"]

  # Download the Countries database
  get_file_from_server(countryfilename)

  countryfile = open(countryfilename, "r")

  # Look for the country corresponding to the country code
  while True:
    try:
      line = countryfile.next().strip()
    except StopIteration:
      break
    else:
      line = line.split("\t")
      if country_code == line[0]:
        country_name = line[1]
        clat = line[2]
        clng = line[3]
        break
  countryfile.close()

  log("country: " + country_name + "\n")
  coordinates = {"latitude": clat, "longitude": clng}
  return coordinates


# Downloads the required file from the server
def get_file_from_server(filename):
  if filename not in listfiles(): # In case it already exists
    if filename not in [statefilename, countryfilename]:
	    url = "http://sensibilityclearinghouse.poly.edu/data/quad/" + filename
    else:
      url = "http://sensibilityclearinghouse.poly.edu/data/" + filename
    httpretrieve_save_file(url, filename)


# Returns a dictionary containing information about the point closest to
# a given lat/lng pair, from the database.
# {"city": closest_city, "statecode": closest_state_code, "countrycode":
# closest_country_code, "coordinates": closest_point}
def find_closest_point(lat, lng):

  # Find the database file with coordinates closest to the given lat/lng pair
  filename = get_filename(lat, lng)
	# Get the list of coordinates from that file
  listofpoints = load_lat_lng_from_file(filename)

  min_dist = 9999
  closest_point = ()
  point1 = (lat, lng)
  closest_city = ""
  closest_state_code = ""
  closest_country_code = ""

  for city in listofpoints.keys():
    data = listofpoints[city]
    point2 = (data[0], data[1])
    dist = find_distance(point1, point2)
    if dist < min_dist:
      min_dist = dist
      closest_point = point2
      closest_city = city
      closest_state_code = data[3]
      closest_country_code = data[2]

  closest = {"city": closest_city, "statecode": closest_state_code, "countrycode": closest_country_code, "coordinates": closest_point}
  #log("closest: " + str(closest) + "\n")

  return closest


# Returns the filename in the database which contains the given lat/lng point
# and other nearby points
def get_filename(lat, lng):
  # get ceiling as x/y index
  x = int(math_ceil(lat))
  y = int(math_ceil(lng))
  filename = str(x) + '_' + str(y) + '.txt'
  return filename


# Returns a dictionary containing all the cities in the given file, along with
# their corresponding data
# {city1: [lat, lng, country_code, state_code], city2: [lat, lng, country_code,
# state_code], ...}
def load_lat_lng_from_file(filename):

  get_file_from_server(filename)

  listofpoints = {}

  fileobj = open(filename, "r")

  while True:
    try:
      line = fileobj.next().strip()
    except StopIteration:
      break
    else:
      linedata = line.split("\t")
      city_name = linedata[0]
      lat = linedata[1]
      lng = linedata[2]
      country_code = linedata[3]
      state_code = linedata[4]
      listofpoints[city_name] = [lat, lng, country_code, state_code]
  fileobj.close()
  return listofpoints


# Returns the distance between two lat/lng points
def find_distance(p1, p2):
  (lat1, lng1) = p1
  (lat2, lng2) = p2
  lat2 = float(lat2)
  lng2 = float(lng2)
  lat_diff = (lat1-lat2) * (lat1-lat2)
  lng_diff = (lng1-lng2) * (lng1-lng2)
  # return squared distance
  return lat_diff + lng_diff


#-----------------------TEST-----------------------#
#try:
#  rmfile("41_-74.txt")
#  rmfile("states.txt")
#  rmfile("countries.txt")
#except:
#  pass

starttime = getruntime()

#coordinates = get_gps_coordinates()
coordinates = {"latitude": 40.721126, "longitude": -74.000042}


log("latitude: " + str(coordinates["latitude"]) + ", longitude: " + str(coordinates["longitude"]) + "\n")

lat = coordinates["latitude"]
lng = coordinates["longitude"]

coordinates = get_city_coordinates(lat, lng)
log("coordinates: " + str(coordinates) + "\n")

coordinates = get_state_coordinates(lat, lng)
log("coordinates: " + str(coordinates) + "\n")

coordinates = get_country_coordinates(lat, lng)
log("coordinates: " + str(coordinates) + "\n")

endtime = getruntime() - starttime
log("runtime: " + str(endtime) + "\n")
