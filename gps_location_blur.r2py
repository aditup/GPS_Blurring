# This program performs location blurring. It accesses the location 
# coordinates of a mobile device from its sensors (e.g. GPS/network), 
# and returns the coordinates (latitude/longitude) corresponding to
# center of the city/state/country to which the original coordinates
# belong.
#
#
# ------Notes------
#
# IndexError: list index out of range
# -- if the coordinates are in the ocean
#
# The columns in states.txt and countries.txt (databases) are as follows:
# 0:"code", 1:"ascii_name", 2:"latitude", 3:"longitude"

dy_import_module_symbols("sensorlib.r2py")
dy_import_module_symbols("httpretrieve.r2py")
dy_import_module_symbols("math.r2py")

statefilename = "states.txt"        # Database of states
countryfilename = "countries.txt"   # Database of countries



# Returns a dictionary of the location coordinates (latitude, longitude)
# from the sensors on the phone.
# Example:
# {"latitude": xxxx, "longitude": xxxx}
def get_gps_coordinates():

  # get a connection to communicate with sensors
  port = get_connectionport()
  sensor_socket = getconnection(port)

  request_data(sensor_socket, 'startLocating', [])

  # try to read current location
  location_data = request_data(sensor_socket, 'readLocation', []) 

  # if location was not retrieved, keep trying
  while not location_data:
    sleep(2)
    location_data = request_data(sensor_socket, 'readLocation', [])

  providers = ["gps", "network", "passive"]
  for p in providers:
    try:
      location = location_data[p]
      log("provider: " + p + '\n')
      break
    except Exception as e:
      continue

  coordinates = {"latitude": location["latitude"], "longitude": location["longitude"]}

  request_data(sensor_socket, 'stopLocating', []) 
  sensor_socket.close()
  return coordinates



# Downloads the required file from the server
def get_file_from_server(filename):
  if filename not in listfiles():
	  url = "http://sensibilityclearinghouse.poly.edu/data/quad/" + filename
	  httpretrieve_save_file(url, filename)



def get_city_coordinates(lat, lng):

  closest = find_closest_point(lat, lng)
  log("city: " + closest["city"] + "\n")
  coordinates = {"latitude": closest["coordinates"][0], "longitude": closest["coordinates"][1]}
  return coordinates



def get_state_coordinates(lat, lng):

  state_name = ""
  slat = ""
  slng = ""

  closest = find_closest_point(lat, lng)
  country_code = closest["countrycode"]
  state_code = closest["statecode"]
  code = country_code + "." + str(state_code)

  get_file_from_server(statefilename)

  statefile = openfile(statefilename, False)
  statefiledata = statefile.readat(None, 0).split("\n")

  for line in statefiledata:
    line = line.split("\t")
    if code == line[0]:
      state_name = line[1]
      slat = line[2]
      slng = line[3]
      break
  statefile.close()

  log("state: " + state_name + "\n")
  coordinates = {"latitude": slat, "longitude": slng}
  return coordinates



def get_country_coordinates(lat, lng):

  country_name = ""
  clat = ""
  clng = ""

  closest = find_closest_point(lat, lng)
  country_code = closest["countrycode"]

  get_file_from_server(countryfilename)

  countryfile = openfile(countryfilename, False)
  countryfiledata = countryfile.readat(None, 0).split("\n")

  for line in countryfiledata:
    line = line.split("\t")
    if country_code == line[0]:
      country_name = line[1]
      clat = line[2]
      clng = line[3]
      break
  countryfile.close()

  log("country: " + country_name + "\n")
  coordinates = {"latitude": lat, "longitude": lng}
  return coordinates



def find_distance(p1, p2):
  (lat1, lng1) = p1
  (lat2, lng2) = p2
  lat2 = float(lat2)
  lng2 = float(lng2)
  lat_diff = (lat1-lat2) * (lat1-lat2)
  lng_diff = (lng1-lng2) * (lng1-lng2)
  # return squared distance
  return lat_diff + lng_diff



def load_lat_lng_from_file(filename):

  get_file_from_server(filename)

  listofpoints = {}

  fileobj = openfile(filename, False)
  filedata = fileobj.readat(None, 0).split("\n")

  for line in filedata:
    linedata = line.split("\t")
    try:
      city_name = linedata[0]
      lat = linedata[1]
      lng = linedata[2]
      country_code = linedata[3]
      state_code = linedata[4]
    except IndexError:
      pass
    else:
      listofpoints[city_name] = [lat, lng, country_code, state_code]
  fileobj.close()
  return listofpoints



def get_filename(lat, lng):
  # get ceiling as x/y index
  x = int(math_ceil(lat))
  y = int(math_ceil(lng))
  filename = str(x) + '_' + str(y) + '.txt'
  return filename



def find_closest_point(lat, lng):

  filename = get_filename(lat, lng)
  listofpoints = load_lat_lng_from_file(filename)

  min_dist = 9999
  closest_point = ()
  point1 = (lat, lng)
  closest_city = ""
  closest_state_code = ""
  closest_country_code = ""

  for city in listofpoints.keys():
    data = listofpoints[city]
    point2 = (data[0], data[1])
    dist = find_distance(point1, point2)
    if dist < min_dist:
      min_dist = dist
      closest_point = point2
      closest_city = city
      closest_state_code = data[3]
      closest_country_code = data[2]

  closest = {"city": closest_city, "statecode": closest_state_code, "countrycode": closest_country_code, "coordinates": closest_point}
  #log("closest: " + str(closest) + "\n")

  return closest



#-----------------------TEST-----------------------#

coordinates = get_gps_coordinates()

log("latitude: " + str(coordinates["latitude"]) + ", longitude: " + str(coordinates["longitude"]) + "\n")

lat = coordinates["latitude"]
lng = coordinates["longitude"]

coordinates = get_city_coordinates(lat, lng)
log("coordinates: " + str(coordinates) + "\n")

coordinates = get_state_coordinates(lat, lng)
log("coordinates: " + str(coordinates) + "\n")

coordinates = get_country_coordinates(lat, lng)
log("coordinates: " + str(coordinates) + "\n")